#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app').app;
const myCache = require('../app').myCache;
var debug = require('debug')('aws-ec2-demo:server');
var http = require('http');
var cpuStat = require('cpu-stat');
var os = require('os');
var Q = require('q');
var exec = require('child_process').exec;


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', function (socket) {
  socket.on('kill-me', function () {
    myCache.get("aliveCores", function (err, value) {
      console.log(value);
      myCache.set("aliveCores", --value, function (err, success) {
        if (!err && success) {
          console.log(success);
        }
      });
    });
    console.log('Kill Me executed');
    // exec('yes > /dev/null &', (err, stdout, stderr) => {
    //   if (err) {
    //     console.log(err);
    //     return;
    //   }
    //   console.log(`stdout: ${stdout}`);
    //   console.log(`stderr: ${stderr}`);
    // });
  });
  setTimeout(function () {
    myCache.get("aliveCores", function (err, value) {
      socket.emit('avilalbe-cores', value);
    });
  }, 1000);

  setInterval(function () {
    var promises = [];
    const cores = parseInt(os.cpus().length);
    for (var i = 0; i < cores; i++) {
      promises.push(getCpuUsage(i));
    }
    Q.allSettled(promises).then(function (results) {
      socket.emit('cpu-stats-res', results);
    });
  }, 1000);
});

/**
 * Normalize a port into a number, string, or false.
 */

function getCpuUsage(coreIndex) {
  return Q.Promise(function (resolve, reject) {
    cpuStat.usagePercent({ coreIndex }, function (err, percent) {
      if (err) {
        return reject(err);
      }
      return resolve(percent);
    });
  });
}

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Server running on ' + bind);
}
